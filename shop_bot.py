import uuid
from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from sqlalchemy import select, and_

from bot_config import BOT_TOKEN
from keyboards import full_menu_kb, start_kb, product_to_menu_kb, product_from_basket_kb, product_to_basket_kb
from db_utils import insert_to_table, select_from_table
from create_db import products, orders, orders_products, engine

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.callback_query(F.data == 'basket')
async def process_callback_basket(callback_query: CallbackQuery):
    try:
        await callback_query.message.edit_text(
            text='–ë—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –ö–û–†–ó–ò–ù–ê',
            reply_markup=callback_query.message.reply_markup
        )
    except TelegramBadRequest:
        await callback_query.answer()


def check_product_in_order(product_id:uuid.UUID):
    """

    :param product_id:
    :return:
    """
    query = select(orders_products).where(orders_products.c.order_id == order_id).where(
        orders_products.c.product_id == product_id)
    k = 0
    with engine.connect() as conn:
        for _ in conn.execute(query):
            k += 1
    return k


def insert_product_to_table(user_id: int, product_id: uuid.UUID):
    """

    :param user_id:
    :param product_id:
    :return:
    """
    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—É
    insert_to_table(orders, {'uid': order_id, 'user_id': user_id})
    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑-–±–ª—é–¥–æ –≤ —Ç–∞–±–ª–∏—Ü—É
    insert_to_table(orders_products, {'uid': uuid.uuid4(), 'order_id': order_id, 'product_id': product_id})


def plus_product_in_basket():
    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    # –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1
    # –ü–æ–ª–æ–∂–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
    pass


@dp.callback_query(F.data.split(':')[0] == 'to_basket')
async def process_callback_to_basket(callback_query: CallbackQuery):
    # ToDo –î–æ–±–∞–≤–∏—Ç—å –≤ –ë–î
    try:
        product_id = uuid.UUID(callback_query.data.split(':')[1])
        user_id = callback_query.from_user.id
        # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ orders_products
        row = check_product_in_order(product_id)

        if row != 0:
            print('–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ')
            plus_product_in_basket()
        else:
            print('–ü–æ–ª–æ–∂–∏–ª —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É')
            insert_product_to_table(user_id, product_id)

        await callback_query.message.edit_caption(
            caption=callback_query.message.caption + '\n' + '<b>‚úîÔ∏è–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É</b>',
            reply_markup=product_from_basket_kb(str(product_id)), parse_mode='HTML'
        )
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data.split(':')[0] == 'from_basket')
async def process_callback_to_basket(callback_query: CallbackQuery):
    # ToDo –£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î
    product_id = uuid.UUID(callback_query.data.split(':')[1])
    print('–£–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
    try:
        await callback_query.message.edit_caption(
            caption=callback_query.message.caption + '\n' + '<b>‚ùó –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã</b>',
            reply_markup=product_to_basket_kb(str(product_id)), parse_mode='HTML'
        )
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data == 'salad')
async def process_callback_product(callback_query: CallbackQuery):
    result = select_from_table(products, params={'value': 'salad'})
    try:
        for product in result.fetchall():
            img = FSInputFile('images/salad.jpeg')
            name = product.t[1]
            weight = product.t[3]
            price = product.t[4]
            caption = name + '\n' + str(weight) + ' –≥—Ä–∞–º–º\n' + str(price) + ' —Ä—É–±–ª–µ–π\n'
            product_id = str(product.t[0])
            await callback_query.message.answer_photo(img,
                                                      caption=caption,
                                                      reply_markup=product_to_basket_kb(product_id))
        await callback_query.message.answer(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
            reply_markup=product_to_menu_kb())

    except FileNotFoundError:
        await callback_query.answer()


@dp.callback_query(F.data == 'menu')
async def process_callback_menu(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:',
        reply_markup=full_menu_kb()
    )


@dp.callback_query(F.data == 'start_buttons')
async def start_message(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ –≤ –Ω–∞—à–µ–º –º–µ–Ω—é üçΩ \n–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∫—É–ø–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ üõí'.format(
            callback_query.from_user),
        reply_markup=start_kb(callback_query.from_user.id))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    global order_id
    order_id = uuid.uuid4()
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç, {0.first_name} üëã\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏".format(message.from_user),
                         reply_markup=start_kb(message.from_user.id))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
@dp.message()
async def send_echo(message: Message):
    try:
        await message.answer(
            text="–ü—Ä–∏–≤–µ—Ç, {0.first_name} üëã\n–Ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —ç—Ç–∏ –≤–∞—à–∏ GPT, –ø–æ—ç—Ç–æ–º—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏".format(
                message.from_user),
            reply_markup=start_kb(message.from_user.id))
    except TypeError:
        await message.reply(
            text='–î–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è '
                 '–º–µ—Ç–æ–¥–æ–º send_copy')


if __name__ == '__main__':
    dp.run_polling(bot)
