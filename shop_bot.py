import uuid
from datetime import datetime, timedelta
from create_db import products
from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from basket import Basket
from bot_config import BOT_TOKEN, ADMINS
from keyboards import full_menu_kb, start_kb, product_to_menu_kb, product_from_basket_kb, product_to_basket_kb, \
    basket_kb, receipt_time_kb, admin_start_kb, admin_menu_kb
from db_utils import select_from_table
from product_class import Product

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


async def send_to_admin(message: str):
    for admin_id in ADMINS:
        await bot.send_message(chat_id=admin_id, text=message, parse_mode='HTML')


@dp.callback_query(F.data.split(':')[0] == 'receipt_time')
async def process_callback_from_basket(callback_query: CallbackQuery):
    time_now = datetime.now()
    minutes = callback_query.data.split(':')[1]
    receipt_time = time_now + timedelta(minutes=int(minutes))
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ –ë–î
    bs.save_ordered_time(receipt_time)
    order_number = bs.get_order_number()
    # ToDo –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–∫–∞–∑–µ
    # –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    message = bs.create_message_about_new_order(order_number, receipt_time)
    await send_to_admin(message)
    try:
        await callback_query.message.answer(
            text='–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —á–µ—Ä–µ–∑ ' + minutes + ' –º–∏–Ω—É—Ç.\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - ' + str(
                order_number),
            reply_markup=product_to_menu_kb(), parse_mode='HTML'
        )
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data == 'confirm_order')
async def process_callback_confirm_order(callback_query: CallbackQuery):
    bs.confirm_order()
    try:
        await callback_query.message.answer(
            text='{0}, –≤–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∑–∞–±–µ—Ä–µ—Ç–µ –∑–∞–∫–∞–∑'.format(
                callback_query.from_user.first_name),
            reply_markup=receipt_time_kb())
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data == 'delete_order')
async def process_callback_delete_order(callback_query: CallbackQuery):
    bs.delete_order()
    try:
        await callback_query.message.answer(
            text='–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω',
            reply_markup=start_kb(callback_query.from_user.id)),
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data == 'basket')
async def process_callback_basket(callback_query: CallbackQuery):
    basket_text = bs.view_all_basket()
    if basket_text != '–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n':
        keyboard = basket_kb()
    else:
        keyboard = start_kb(callback_query.from_user.id)
    try:
        await callback_query.message.answer(
            text=basket_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data.split(':')[0] == 'to_basket')
async def process_callback_to_basket(callback_query: CallbackQuery):
    try:
        product_id = uuid.UUID(callback_query.data.split(':')[1])
        user_id = callback_query.from_user.id
        # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ orders_products
        row, current_value = bs.check_product_in_order(product_id)

        if row != 0:
            bs.change_value_in_basket(product_id, current_value)
        else:
            bs.insert_product_to_table(user_id, product_id)

        await callback_query.message.edit_caption(
            caption=callback_query.message.caption.split(':')[0] + ': ' + str(current_value + 1),
            reply_markup=product_from_basket_kb(str(product_id)), parse_mode='HTML'
        )
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data.split(':')[0] == 'from_basket')
async def process_callback_from_basket(callback_query: CallbackQuery):
    product_id = uuid.UUID(callback_query.data.split(':')[1])
    current_value = bs.get_current_value_by_product_id(product_id)
    bs.change_value_in_basket(product_id, current_value, False)
    new_value = current_value - 1
    try:
        await callback_query.message.edit_caption(
            caption=callback_query.message.caption.split(':')[0] + ': ' + str(new_value),
            reply_markup=product_to_basket_kb(str(product_id), new_value), parse_mode='HTML'
        )
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data.split(':')[0] == 'category')
async def process_callback_product(callback_query: CallbackQuery):
    category = callback_query.data.split(':')[1]
    result = select_from_table(products, params={'value': category})
    try:
        for product in result.fetchall():
            img = FSInputFile('images/salad.jpeg')
            product_id, name, description, weight, price, category = product.t
            current_value = bs.get_current_value_by_product_id(product_id)
            caption = name + '\n' + str(weight) + ' –≥—Ä–∞–º–º\n' + str(price) + ' —Ä—É–±–ª–µ–π\n–í –∫–æ—Ä–∑–∏–Ω–µ: ' + str(current_value)
            await callback_query.message.answer_photo(img,
                                                      caption=caption,
                                                      reply_markup=product_to_basket_kb(str(product_id), current_value))
        await callback_query.message.answer(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
            reply_markup=product_to_menu_kb())

    except FileNotFoundError:
        await callback_query.answer()


@dp.callback_query(F.data == 'menu')
async def process_callback_menu(callback_query: CallbackQuery):
    await callback_query.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:',
        reply_markup=full_menu_kb()
    )


@dp.callback_query(F.data == 'start_buttons')
async def start_message(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ –≤ –Ω–∞—à–µ–º –º–µ–Ω—é üçΩ \n–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∫—É–ø–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ üõí'.format(
            callback_query.from_user),
        reply_markup=start_kb(callback_query.from_user.id))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    global bs
    bs = Basket()
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç, {0.first_name} üëã\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏".format(message.from_user),
                         reply_markup=start_kb(message.from_user.id))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def send_echo(message: Message):
    try:
        await message.answer(
            text="–ü—Ä–∏–≤–µ—Ç, {0.first_name} üëã\n–Ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —ç—Ç–∏ –≤–∞—à–∏ GPT, –ø–æ—ç—Ç–æ–º—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏".format(
                message.from_user),
            reply_markup=start_kb(message.from_user.id))
    except TypeError:
        await message.reply(
            text='–î–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è '
                 '–º–µ—Ç–æ–¥–æ–º send_copy')


# Admin callbacks
@dp.callback_query(F.data == 'start_admin')
async def start_admin(callback_query: CallbackQuery):

    try:
        await callback_query.message.answer(
            text='{0}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'.format(
                callback_query.from_user.first_name),
            reply_markup=admin_start_kb())
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data == 'add_new_product')
async def add_new_product(callback_query: CallbackQuery):

    try:
        await callback_query.message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
            reply_markup=admin_menu_kb())
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data.split(':')[0] == 'cat')
async def get_category(callback_query: CallbackQuery):
    category = callback_query.data.split(':')[1]
    pr = Product()
    pr.product_data['category'] = category
    try:
        await callback_query.message.answer(
            text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \nname:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)',
            reply_markup=admin_menu_kb())
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data.split(':')[0] == 'name')
async def get_category(callback_query: CallbackQuery):
    name = callback_query.data.split(':')[1]
    pr.product_data['category'] = name
    try:
        await callback_query.message.answer(
            text='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \nname:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)',
            reply_markup=admin_menu_kb())
    except TelegramBadRequest:
        await callback_query.answer()


if __name__ == '__main__':
    dp.run_polling(bot)
