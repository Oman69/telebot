from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from bot_config import BOT_TOKEN

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from keyboards import product_menu_kb, full_menu_kb, start_kb, product_to_menu_kb

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.callback_query(F.data == 'basket')
async def process_callback_basket(callback_query: CallbackQuery):
    try:
        await callback_query.message.edit_text(
            text='–ë—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –ö–û–†–ó–ò–ù–ê',
            reply_markup=callback_query.message.reply_markup
        )
    except TelegramBadRequest:
        await callback_query.answer()


@dp.callback_query(F.data == 'salad')
async def process_callback_product(callback_query: CallbackQuery):
    products = [{'img': FSInputFile('images/salad.jpeg'), 'caption': '–°–∞–ª–∞—Ç –≥—Ä–µ—á–µ—Å–∫–∏–π\n–í–µ—Å: 150 –≥—Ä\n–¶–µ–Ω–∞: 200 —Ä—É–±','id': 1, 'in_basket': 0},
                {'img': FSInputFile('images/salad.jpeg'), 'caption': '–°–∞–ª–∞—Ç —è–ø–æ–Ω—Å–∫–∏–π\n–í–µ—Å: 160 –≥—Ä\n–¶–µ–Ω–∞: 230 —Ä—É–±','id': 2, 'in_basket': 0}]
    try:
        for product in products:
            await callback_query.message.answer_photo(product['img'],
                                                      caption=product['caption'],
                                                      reply_markup=product_menu_kb())
        await callback_query.message.answer(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
            reply_markup=product_to_menu_kb())

    except FileNotFoundError:
        await callback_query.answer()


@dp.callback_query(F.data == 'menu')
async def process_callback_menu(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:',
        reply_markup=full_menu_kb()
        )


@dp.callback_query(F.data == 'start_buttons')
async def start_message(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text='{0.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ –≤ –Ω–∞—à–µ–º –º–µ–Ω—é üçΩ \n–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∫—É–ø–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ üõí'.format(callback_query.from_user),
        reply_markup=start_kb(callback_query.from_user.id))


#–≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç, {0.first_name} üëã\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏".format(message.from_user),
                         reply_markup=start_kb(message.from_user.id))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
@dp.message()
async def send_echo(message: Message):
    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.reply(
            text='–î–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è '
                 '–º–µ—Ç–æ–¥–æ–º send_copy')

if __name__ == '__main__':
    dp.run_polling(bot)